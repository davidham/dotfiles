#!/bin/bash

# Use this file to overwrite or add settings in Mathias' setup
# Git credentials
# Not in the repository, to prevent people from accidentally committing under my name
GIT_AUTHOR_NAME="David Ham"
GIT_COMMITTER_NAME="$GIT_AUTHOR_NAME"
git config --global user.name "$GIT_AUTHOR_NAME"
GIT_AUTHOR_EMAIL="dham@clearcover.com"
GIT_COMMITTER_EMAIL="$GIT_AUTHOR_EMAIL"
git config --global user.email "$GIT_AUTHOR_EMAIL"
git config --global commit.gpgsign false

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh" # This loads nvm


# This is so we don't have to enter the ssh key password every time we
# restart
ssh-add -K ~/.ssh/id_rsa

# so we don't have to run assume-role in eval
source $(which assume-role)

source ~/.profile


[[ -f $HOME/.kube/configs ]] && \
[[ $(grep minikube $HOME/.kube/configs | wc -l ) != 0 ]] \
|| echo "No errant kubeconfigs."

function initConfigVar () {
    if [[ $(ls ~/.kube/configs | grep kubeconfig | wc -l) != 0 ]]; then
        for f in `ls ~/.kube/configs/ | grep kubeconfig`;
        do export KUBECONFIG="$HOME/.kube/configs/$f:$KUBECONFIG"; done && \
        export KUBECONFIG=$(echo $KUBECONFIG | sed 's/:$//')
    fi
}
if [[ -d $HOME/.kube/configs ]] && initConfigVar; then
  kubectl config get-contexts
else
  mkdir $HOME/.kube/configs && \
  echo "No configs directory. Put kubeconfigs in $HOME/.kube/configs/ and source this profile to load."
fi

# deletes local branches that are not ahead of master / are deleted remotely
clean_branches() {
  REMOTES="$@";
  if [ -z "$REMOTES" ]; then
    REMOTES=$(git remote);
  fi
  REMOTES=$(echo "$REMOTES" | xargs -n1 echo)
  RBRANCHES=()
  while read REMOTE; do
    CURRBRANCHES=($(git ls-remote $REMOTE | awk '{print $2}' | grep 'refs/heads/' | sed 's:refs/heads/::'))
    RBRANCHES=("${CURRBRANCHES[@]}" "${RBRANCHES[@]}")
  done < <(echo "$REMOTES" )
  [[ $RBRANCHES ]] || exit
  LBRANCHES=($(git branch | sed 's:\*::' | awk '{print $1}'))
  for i in "${LBRANCHES[@]}"; do
    skip=
    for j in "${RBRANCHES[@]}"; do
      [[ $i == $j ]] && { skip=1; echo -e "\033[32m Keeping $i \033[0m"; break; }
    done
    [[ -n $skip ]] || { echo -e "\033[31m $(git branch -D $i) \033[0m"; }
  done
}

